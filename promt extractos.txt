hola copilot te propongo ayudarme con este peque;o proyecto que me ayudaria a trabajar de una manera mas optima, ayúdame a construir una pagina con html, css y python

esto trata de la aplicar ciertas transformaciones a archivos: csv, xls y xlsx, dependiendo de la estructura tienen distintos campos y valores de los cuales partiendo de las transformaciones mencionadas mas abajo se normalizarian todas las estructuras archivos con estructuras similares. 
entonces que me gustaria:
1- cargar el archivo
2- que el archivo se previsualice en una parte de la pantalla
3- clickear el boton que que aplique los distintos procesos de transformacion mencionados mas adelante y lo exporte a csv - utf8 delimitado por comas.

necesito que html se comporte de la siguiente manera: necesito que por cada estructura que te mencionare mas adelante exista un boton, que al ser aplicado ejecute las modificaciones mencionadas mas abajo donde indico que transformaciones se aplican dependiendo de cada estructura.
necesito poder cargar el archivo, o arrastrarlo y soltarlo en el centro del navegador para cargarlo, se muestre la previsualizacion a un costado. Tambien necesito poder agregaR UN LOGO dentro de cada boton para que sea vialmente mas asmigable.


el css, me gustaria que sea un poco sobrio pero con colores para identificar los distintos elementos de la pagina web, con botones visualmente atractivos y funcionalidades visualmente agradables.


para el procesaminto de los archivos usaremos paython:

necesito un que el archivo cargado sea detectado automaticamente si es csv, xls, o xlsx, entonces al detectar el archivo, previsualizarce iniciaria despues de clickear el boton regerido con la estructura seleccionada los procesos de transformacion de cada tipo de archivo. hasta que todos cumplan con la estructura ideal requerida y sean exportados a csv. 

estructura 1 -> Exterior Jurídico
#ESTE ARCHIVO DEBE CARGARSE EN FORMATO .XLS
paso 1:eliminar la primera fila.
paso 2:el signo de la columna 5 índice 4 utilizarlo como prefijo de la columna 4 índice 3.
paso 3:eliminar columnas las columnas 5 índice 4 y columnas 6 índice 5.
paso 3:insertar fila con los siguientes enabezados para cada columna: columna1 indice 0(ETIQUETA),  columna2 indice 1 (FECHA), columna3 indice 2(REFERENCIA), columna4 indice 3(IMPORTE).
paso 4:transformar columna 2 indice 1 de fecha dd/mm/aa A dd/mm/aaaa, transformar columna 4 indice 3 en números decimales.
paso 5:exportar en el formato csv- utf8 (delimitado por comas).

 

estructura 2 -> Exterior Personales
#ESTE ARCHIVO DEBE CARGARSE EN FORMATO .XLS - este pide permisos para confiar en el origen(si se confia en el origen) ayudame a manejar esto de la mejor manera para evitar perdida de datos.
paso 1:detectar columnas que esten en blanco, si existen columnas sin ningun valor, eliminarla.
paso 2:eliminar columnas las columnas 1 índice 0, columnas 3 índice 2, columnas 7 índice 6.
paso 3:insertar una fila y agregar encabezados a las siguiente columnas, columna1 indice 0:(FECHA), columna2 indice 1:(ETIQUETA), columna3 indice 2:(REFERENCIA), columna4 indice 3(IMPORTE) .
paso 4:reordenar las columnas de la siguiente manera: columna1 indice 0(ETIQUETA),  columna2 indice 1 (FECHA), columna3 indice 2(REFERENCIA), columna4 indice 3(IMPORTE).
paso 5:transformar columna 4 indice 3 en números decimales.
paso 6:exportar en el formato csv- utf8 (delimitado por comas).


estructura 3 -> Venezuela
#ESTE ARCHIVO DEBE CARGARSE EN FORMATO .XLSx
paso 1:eliminar las siguientes columnas: columna 4 indice 3, columna 6 indice 5, columna 7 indice 6, columna 8 indice 7.
paso 2:reemplazar "monto" por "importe", "concepto" por "etiqueta"  y luego elevar toda la primera fila como mayusculas.
paso 3:reordenar las columnas de la siguiente manera: columna1 indice 0(ETIQUETA),  columna2 indice 1 (FECHA), columna3 indice 2(REFERENCIA), columna4 indice 3(IMPORTE).
paso 4:transformar columna 4 indice 3 en números decimales.
paso 5:exportar en el formato csv- utf8 (delimitado por comas).

estructura 4 -> Bancaribe
#ESTE ARCHIVO DEBE CARGARSE EN FORMATO .CSV
paso 1:eliminar la primera fila.
paso 2:si en la columna 4 indice 3 es "C" cambiarlo por "+" y si es "D" cambiarlo por "-", entonces el signo de la columna 4 índice 3 utilizarlo como prefijo de la columna 5 índice 4.
paso 3:eliminar las columna 4 índice 3, columna 6 índice 5, columna 7 índice 6, columna 8 índice 7, , columna 9 índice 8.
paso 4:aplicar una condicional con el siguiente contexto: si en la columna 3 indice 2 contiene "TDD - ADMINISTRACION" extraer de la columna 2 indice 1 un rango de texto: índice inicial 8, número de caracteres 3.
paso 5:insertar 1 fila como encabezados para cada columna tales como columna 1 indice 0: FECHA, columna 2 indice 1: REFERENCIA, columna 3 indice 2:ETIQUETA, columna 4 indice 3:COLUMN4, E: IMPORTE.
paso 6:reordenar las columnas de la siguiente manera: columna1 indice 0(ETIQUETA),  columna2 indice 1 (FECHA), columna3 indice 2(REFERENCIA), columna4 indice 3(IMPORTE).
paso 7:transformar columna 4 indice 3 en números decimales.
paso 8:exportar en el formato csv- utf8 (delimitado por comas).

estructura 5 -> Banesco
#ESTE ARCHIVO DEBE CARGARSE EN FORMATO .xls
paso 1:reemplazar "Monto" por "importe", "DescripciÃ³n" por "etiqueta"  y luego elevar toda la primera fila como mayusculas.
paso 2:eliminar la columna 5 índice 4.
paso 3:reordenar las columnas de la siguiente manera: columna1 indice 0(ETIQUETA),  columna2 indice 1 (FECHA), columna3 indice 2(REFERENCIA), columna4 indice 3(IMPORTE).
paso 7:transformar columna 4 indice 3 en números decimales.
paso 8:exportar en el formato csv- utf8 (delimitado por comas).













-------------------------------------------------------------------
7. Siguientes Mejoras y Sugerencias
- Agregar barra de progreso y spinner durante upload/transformación.
- Dockerizar la aplicación para despliegue rápido.
- Validar tamaños máximos de archivo y dar feedback.
- Añadir registro de logs automáticos (por ejemplo, con Python logging).
- Crear tests unitarios de cada transformación con pytest.
- Permitir descargas masivas en ZIP si se procesan varios archivos a la vez.
- Internacionalizar la interfaz (i18n) para más idiomas.
- Optimizar lectura de CSVs muy grandes con chunks y streaming.
